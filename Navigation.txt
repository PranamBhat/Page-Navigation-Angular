When you click on something on a page and it goes to another page - that is called a link - redirect is something that usually happens in response to some event that is not the user expressly chosing to navigate away from the page.

If you are wanting to navigate to one of your routes you could simply setup your button as a link to a route

<button routerLink="pagename">Page Name</button> 

Or if you need to pass a parameter (assuming the pagename route is relative to the page route)

<button [routerLink]="['/pagename',123]">Page Name</button> 

If you want to do it in code then bind the (click) event to a component method and use the router to navigate to the link

<button (click)="goToPage('/pagename', 123)">Page Name</button> 

And in your component :

import { Component, OnInit } from '@angular/core'; 
import { Router } from '@angular/router'; 
@Component({ 
 selector: 'app-my-component', 
 templateUrl: './app.my-component.html', 
 styleUrls: ['./app.my-component.css'] 
}) 
export class MyComponent implements OnInit { 
  constructor(private router: Router) {} 
  ngOnInit() 
  { 
    // ....  
  } 
  goToPage(pagename:string, parameter:string) 
  { 
    this.router.navigate([pagename, parameter]); 
  } 
} 
